// Code generated by MockGen. DO NOT EDIT.
// Source: ./storage.go

// Package testdata is a generated GoMock package.
package testdata

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/sheremet-o/cryptochaser/internal/entities"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetAllTitles mocks base method.
func (m *MockStorage) GetAllTitles(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTitles", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTitles indicates an expected call of GetAllTitles.
func (mr *MockStorageMockRecorder) GetAllTitles(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTitles", reflect.TypeOf((*MockStorage)(nil).GetAllTitles), ctx)
}

// GetAvg mocks base method.
func (m *MockStorage) GetAvg(ctx context.Context, titles []string) ([]*entities.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvg", ctx, titles)
	ret0, _ := ret[0].([]*entities.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvg indicates an expected call of GetAvg.
func (mr *MockStorageMockRecorder) GetAvg(ctx, titles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvg", reflect.TypeOf((*MockStorage)(nil).GetAvg), ctx, titles)
}

// GetCurrent mocks base method.
func (m *MockStorage) GetCurrent(ctx context.Context, titles []string) ([]*entities.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrent", ctx, titles)
	ret0, _ := ret[0].([]*entities.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrent indicates an expected call of GetCurrent.
func (mr *MockStorageMockRecorder) GetCurrent(ctx, titles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrent", reflect.TypeOf((*MockStorage)(nil).GetCurrent), ctx, titles)
}

// GetMax mocks base method.
func (m *MockStorage) GetMax(ctx context.Context, titles []string) ([]*entities.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMax", ctx, titles)
	ret0, _ := ret[0].([]*entities.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMax indicates an expected call of GetMax.
func (mr *MockStorageMockRecorder) GetMax(ctx, titles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMax", reflect.TypeOf((*MockStorage)(nil).GetMax), ctx, titles)
}

// GetMin mocks base method.
func (m *MockStorage) GetMin(ctx context.Context, titles []string) ([]*entities.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMin", ctx, titles)
	ret0, _ := ret[0].([]*entities.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMin indicates an expected call of GetMin.
func (mr *MockStorageMockRecorder) GetMin(ctx, titles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMin", reflect.TypeOf((*MockStorage)(nil).GetMin), ctx, titles)
}

// StoreCoin mocks base method.
func (m *MockStorage) StoreCoin(ctx context.Context, coin *entities.Coin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCoin", ctx, coin)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreCoin indicates an expected call of StoreCoin.
func (mr *MockStorageMockRecorder) StoreCoin(ctx, coin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCoin", reflect.TypeOf((*MockStorage)(nil).StoreCoin), ctx, coin)
}
